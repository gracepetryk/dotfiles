name: Review Enforcement

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled]
  pull_request_review:
    types: [submitted, edited, dismissed]

jobs:
  remove-label:
    if: github.event_name == 'pull_request' && github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v5
      - id: approved-in-meeting
        uses: actions/labeler@v5
        with:
          sync-labels: true
  set-status:
    if: ${{ always() }}
    needs: remove-label
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            let reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            let labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            let has_two_reviews = reviews && reviews.data.filter((r) => r.status === "APPROVED").length >= 2
            let has_label = labels && labels.data.find((label) => label.name === "approved-in-meeting")

            let args = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "Meets review requirements",
              head_sha: context.sha,
              conclusion: "action_required",
              actions: [{label: "add label", description: "add label", identifier: "add-label"}]
            }

            if (has_two_reviews || has_label) {
              args.status = "completed"
              args.conclusion = "success"
            }

            await github.rest.checks.create(args)
