name: Review Enforcement

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled]
  pull_request_review:
    types: [submitted, edited, dismissed]

jobs:
  set-status:
    runs-on: ubuntu-latest
    env:
      PR_HEAD: ${{ github.event.pull_request.head.sha }}
    steps:
      - uses: actions/checkout@v5

      - if: github.event_name == 'pull_request' && github.event.action == 'synchronize'
        uses: actions/labeler@v5
        id: approved-in-meeting
        with:
          sync-labels: true

      - uses: actions/github-script@v7
        with:
          script: |
            let reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            let labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            let has_two_reviews = reviews && reviews.data.filter((r) => r.status === "APPROVED").length >= 2;
            let has_label = labels && labels.data.find((label) => label.name === "approved-in-meeting");
            const check_name = "Meets review requirements";

            let existing_check = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              check_name: check_name,
              filter: 'latest'
            });

            let now = new Date();
            let args = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: check_name,
              started_at: now.toISOString(),
              output: {}
            };

            let check_method = null;
            if (existing_check.data.total_count >= 0) {
              check_method = github.rest.checks.create;
              args.head_sha = context.sha;
            } else {
              check_method = github.rest.checks.create;
              args.head_sha = context.sha;
            }

            if (has_two_reviews || has_label) {
              args.conclusion = "success"
              await check_method(args)
            } else {
              args.conclusion = "failure"
              let msg =  "Waiting for review requirements to be met."
              args.output = {
                title: msg,
                summary: msg
              }
              check_method(args);
            }
